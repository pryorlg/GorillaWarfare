using UnityEngine;

public class PlayerAttack : MonoBehaviour
{
    private float attackCooldown; // Float varaible to store the attack cooldown timer.

    [SerializeField] public float startAttackCooldown; // Serialized variable so the starting time for the cooldown can be set.

    private Animator anim; // Varaible to store the Animator component information.

    private PlayerMovement playerMovement; // Variable that allows access to the PlayerMovement script functions.
    private PlayerHealth playerHealth; // Variable that allows access to the PlayerHealth script functions. 

    public Transform meleePoint; // Variable to store the child transform of the player tracking the melee point.

    public float attackRange; // Variable to store the desired radius of the attack

    public LayerMask enemyLayers; // Variable to store the layers which will be affected by attacks. 

    [SerializeField] private int damage; // Variable to store the amount of damage given.

    private void Awake()
    {
        anim = GetComponent<Animator>(); // Stores the Animator component from the game object.
        playerMovement = GetComponent<PlayerMovement>(); // Stores the PlayerMovement components from the PlayerMovement script
        playerHealth = GetComponent<PlayerHealth>(); // Stores the PlayerHealth componenets from the PlayerHealth script
    }

    private void Update()
    {
        // Check if the attack cooldown has reached 0 or less. Then check the player, whether the relevant keybind 
        // has been pressed, and that the player is in a state where they can attack.
        if(attackCooldown <= 0)
        {
            if(Input.GetKey(KeyCode.Space) && playerMovement.canAttack() && gameObject.name == "Player")
            {
                // Triggers the melee animation
                anim.SetTrigger("melee");
                
                // Lock player movement while attacking.
                playerMovement.canMove = false;
                
                // Begin the attack cooldown.
                attackCooldown = startAttackCooldown;
            }

            if(Input.GetMouseButtonDown(0) && playerMovement.canAttack() && gameObject.name == "Player2")
            {
                // Triggers the melee animation
                anim.SetTrigger("melee");
                
                // Lock player movement while attacking.
                playerMovement.canMove = false;
                
                // Begin the attack cooldown.
                attackCooldown = startAttackCooldown;
            }
        }

        else
        {
            // If the attack cooldown has not reached 0 or less, decrement by Time.deltatime
            attackCooldown -= Time.deltaTime;

            // Once the cooldown has reset and the player is no longer attacking, allow movement for the player again.
            if(attackCooldown <= 0)
            {
                playerMovement.canMove = true;
            }
        }
    }
    
    // This function is called by an AnimationEvent 10 milliseconds into the "melee" animation.
    public void meleeAttack()
    {
        // Here we use a 2D collider array called hitEnemies to store all colliders which are within the
        // circle generated by Physics2D whenever an attack takes place. We set the center point based 
        // on the location of our sprite, set the attack range as the radius, and set the layers affected
        // to be the layer mask enemyLayers.
        Collider2D[] hitEnemies = Physics2D.OverlapCircleAll(meleePoint.position, attackRange, enemyLayers);

        // For each enemy game object within the hitEnemies 2D collider array, we call the takeDamage function
        // of the EnemyHealth script component and pass an integer to track the amount of damage given.
        foreach(Collider2D enemy in hitEnemies)
        {
            enemy.GetComponent<EnemyHealth>().takeDamage(damage);
        }
    }

    // This function allows visualization of the meleeAttack range generated by Physics2D.OverlapCircleAll()
    public void OnDrawGizmosSelected()
    {
        if (meleePoint == null){
             return;
        }

        Gizmos.DrawWireSphere(meleePoint.position, attackRange);
    }
}
